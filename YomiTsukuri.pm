### YomiTsukuri
### 文字列はUTF8に変換したものを渡してください。
### 第２引数に文字コードを渡すとそれを元にDecodeとEncodeを行います。

package YomiTsukuri;

use strict;
use warnings;
use utf8;
use Encode;


# 濁音静音変換
my %dakusei = (
    'が' => 'か',
    'ぎ' => 'き',
    'ぐ' => 'く',
    'げ' => 'け',
    'ご' => 'こ',
    'ざ' => 'さ',
    'じ' => 'し',
    'ず' => 'す',
    'ぜ' => 'せ',
    'ぞ' => 'そ',
    'だ' => 'た',
    'ぢ' => 'ち',
    'づ' => 'つ', 
    'で' => 'て',
    'ど' => 'と',
    'ば' => 'は',
    'び' => 'ひ',
    'ぶ' => 'ふ',
    'べ' => 'へ',
    'ぼ' => 'ほ',
    'ぱ' => 'は',
    'ぴ' => 'ひ',
    'ぷ' => 'ふ',
    'ぺ' => 'へ',
    'ぽ' => 'ほ',
    'ヴ' => 'ふ',
    );

# 音引き変換
my %onbiki = (
    'あ' => 'あ',
    'い' => 'い',
    'う' => 'う',
    'え' => 'え',
    'お' => 'お',
    'か' => 'あ',
    'き' => 'い',
    'く' => 'う',
    'け' => 'え',
    'こ' => 'お',
    'が' => 'あ',
    'ぎ' => 'い',
    'ぐ' => 'う',
    'げ' => 'え',
    'ご' => 'お',
    'さ' => 'あ',
    'し' => 'い',
    'す' => 'う',
    'せ' => 'え',
    'そ' => 'お',
    'ざ' => 'あ',
    'じ' => 'い',
    'ず' => 'う',
    'ぜ' => 'え',
    'ぞ' => 'お',
    'た' => 'あ',
    'ち' => 'い',
    'つ' => 'う',
    'て' => 'え',
    'と' => 'お',
    'だ' => 'あ',
    'ぢ' => 'い',
    'づ' => 'う',
    'で' => 'え',
    'ど' => 'お',
    'な' => 'あ',
    'に' => 'い',
    'ぬ' => 'う',
    'ね' => 'え',
    'の' => 'お',
    'は' => 'あ',
    'ひ' => 'い',
    'ふ' => 'う',
    'へ' => 'え',
    'ほ' => 'お',
    'ば' => 'あ',
    'び' => 'い',
    'ぶ' => 'う',
    'べ' => 'え',
    'ぼ' => 'お',
    'ぱ' => 'あ',
    'ぴ' => 'い',
    'ぷ' => 'う',
    'ぺ' => 'え',
    'ぽ' => 'お',
    'ま' => 'あ',
    'み' => 'い',
    'む' => 'う',
    'め' => 'え',
    'も' => 'お',
    'や' => 'あ',
    'ゆ' => 'う',
    'よ' => 'お',
    'ら' => 'あ',
    'り' => 'い',
    'る' => 'う',
    'れ' => 'え',
    'ろ' => 'お',
    'わ' => 'あ',
    'ぁ' => 'あ',
    'ぃ' => 'い',
    'ぅ' => 'う',
    'ぇ' => 'え',
    'ぉ' => 'お',
    'ゃ' => 'あ',
    'ゅ' => 'う',
    'ょ' => 'お',
    'ゎ' => 'あ',
    'ヴ' => 'う',
    'ん' => 'ん',
    );
my %onbikiLittle = (
    'あ' => 'ぁ',
    'い' => 'ぃ',
    'う' => 'ぅ',
    'え' => 'ぇ',
    'お' => 'ぉ',
    'か' => 'ぁ',
    'き' => 'ぃ',
    'く' => 'ぅ',
    'け' => 'ぇ',
    'こ' => 'ぉ',
    'が' => 'ぁ',
    'ぎ' => 'ぃ',
    'ぐ' => 'ぅ',
    'げ' => 'ぇ',
    'ご' => 'ぉ',
    'さ' => 'ぁ',
    'し' => 'ぃ',
    'す' => 'ぅ',
    'せ' => 'ぇ',
    'そ' => 'ぉ',
    'ざ' => 'ぁ',
    'じ' => 'ぃ',
    'ず' => 'ぅ',
    'ぜ' => 'ぇ',
    'ぞ' => 'ぉ',
    'た' => 'ぁ',
    'ち' => 'ぃ',
    'つ' => 'ぅ',
    'て' => 'ぇ',
    'と' => 'ぉ',
    'だ' => 'ぁ',
    'ぢ' => 'ぃ',
    'づ' => 'ぅ',
    'で' => 'ぇ',
    'ど' => 'ぉ',
    'な' => 'ぁ',
    'に' => 'ぃ',
    'ぬ' => 'ぅ',
    'ね' => 'ぇ',
    'の' => 'ぉ',
    'は' => 'ぁ',
    'ひ' => 'ぃ',
    'ふ' => 'ぅ',
    'へ' => 'ぇ',
    'ほ' => 'ぉ',
    'ば' => 'ぁ',
    'び' => 'ぃ',
    'ぶ' => 'ぅ',
    'べ' => 'ぇ',
    'ぼ' => 'ぉ',
    'ぱ' => 'ぁ',
    'ぴ' => 'ぃ',
    'ぷ' => 'ぅ',
    'ぺ' => 'ぇ',
    'ぽ' => 'ぉ',
    'ま' => 'ぁ',
    'み' => 'ぃ',
    'む' => 'ぅ',
    'め' => 'ぇ',
    'も' => 'ぉ',
    'や' => 'ぁ',
    'ゆ' => 'ぅ',
    'よ' => 'ぉ',
    'ら' => 'ぁ',
    'り' => 'ぃ',
    'る' => 'ぅ',
    'れ' => 'ぇ',
    'ろ' => 'ぉ',
    'わ' => 'ぁ',
    'ぁ' => 'ぁ',
    'ぃ' => 'ぃ',
    'ぅ' => 'ぅ',
    'ぇ' => 'ぇ',
    'ぉ' => 'ぉ',
    'ゃ' => 'ぁ',
    'ゅ' => 'ぅ',
    'ょ' => 'ぉ',
    'ゎ' => 'ぁ',
    'ヴ' => 'ぅ',
    'ん' => 'ん',
    );



# 濁音静音変換　文字列置換型
sub dakuon2seion {
    $_ = shift;
    my $coding = shift;
    $_ = decode($coding, $_) if $coding;
    s/が/か/g;
    s/ぎ/き/g;
    s/ぐ/く/g;
    s/げ/け/g;
    s/ご/こ/g;
    s/ざ/さ/g;
    s/じ/し/g;
    s/ず/す/g;
    s/ぜ/せ/g;
    s/ぞ/そ/g;
    s/だ/た/g;
    s/ぢ/ち/g;
    s/づ/つ/g; 
    s/で/て/g;
    s/ど/と/g;
    s/ば/は/g;
    s/び/ひ/g;
    s/ぶ/ふ/g;
    s/べ/へ/g;
    s/ぼ/ほ/g;
    s/ぱ/は/g;
    s/ぴ/ひ/g;
    s/ぷ/ふ/g;
    s/ぺ/へ/g;
    s/ぽ/ほ/g;
    s/ヴ/ふ/g;
    $_ = encode($coding, $_) if $coding;
    $_;
}

# 濁音静音変換　ハッシュ型
sub dakuon2seionHash {
    my $str = shift;
    my $coding = shift;
    $str = decode($coding, $str) if $coding;
    my($i, $ch, $len, $out, @str);
    @str = split('', @str);
    $len = @str;
    for ($i = 0; $i < $len; $i++) {
        $ch = $str[$i];
        $str[$i] = exists $dakusei{$ch} ? $dakusei{$ch} : $ch;
    }
    $out = join("", @str);
    $out = encode($coding, $out) if $coding;
    $out;
}




# 音引き変換
sub onbiki {
    my($str, $coding) = @_;
    $str = decode($coding, $str) if $coding;
    my($i, $ch, $pch, $len, $out, @str);
    @str = split('', $str);
    $len = @str;
    for ($i = 0; $i < $len; $i++) {
        $ch = $str[$i];
        if ($ch eq 'ー' and $pch) {
            $str[$i] = exists $onbiki{$pch} ? $onbiki{$pch} : $ch;
        }
        $pch = $str[$i];
    }
    $out = join("", @str);
    $out = encode($coding, $out) if $coding;
    $out;
}

sub onbikiLittle {
    my($str, $coding) = @_;
    $str = decode($coding, $str) if $coding;
    my($i, $ch, $pch, $len, $out, @str);
    @str = split('', $str);
    $len = @str;
    for ($i = 0; $i < $len; $i++) {
        $ch = $str[$i];
        if ($ch eq 'ー' and $pch) {
            $str[$i] = exists $onbikiLittle{$pch} ? $onbikiLittle{$pch} : $ch;
        }
        $pch = $str[$i];
    }
    $out = join("", @str);
    $out = encode($coding, $out) if $coding;
    $out;
}

1;
